# -*- coding: utf-8 -*-
"""MachineLearning-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B7EBqe7t-7SFJZCN5SYyjotlWV1Asvln
"""

#MAKİNE ÖĞRENİMİ İÇİN BAŞLANGIÇ VE İLERLEME NOTLARI

#scikit-learn kütüphanesinden

#--->veri seti
#--->model
#--->araçlar    bunları import ederek başlayıyoruz

from sklearn.datasets import load_iris#iris veri seti
from sklearn.model_selection import train_test_split#rğitim-test ayrımı
from sklearn.neighbors import KNeighborsClassifier#KNN modeli seçimi
from sklearn.metrics import accuracy_score #Başarı ölçme

!pip install scikit-learn #scikit learn yükleme

#VERİ SETİ YÜKLEME ve X,Y OLARAK AYIRIMI

iris=load_iris()#iris veri seti yüklendi
X=iris.data#Çiçeklerin boyutları,genişlik vs(4 özellik)
y=iris.target#Çiçek türleri:0,1,2

#VERİYİ EĞİTİM VE TEST SETİ OLARAK AYIRMA

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=43)

#Veriyi %80--->eğitim %20 test olacak şekilde böldük

#random_state ile sonuçları tekrar elde edebiliriz

#KNN mODELİNİ OLUŞTURMA ve EĞİTME

knn = KNeighborsClassifier(n_neighbors=3)
#KNN modeli oluşturulup k=3 komşu laıncak şekilde atandı

knn.fit(X_train,y_train)
#Model eğitim verisi ile eğitiliyor

#MODELİ TEST VERİSİ İLE TAHMİN ETTİRME

y_pred= knn.predict(X_test)

#BAŞARI ORANINI HESAPLAMA
y_pred= knn.predict(X_test)
accuracy= accuracy_score(y_test,y_pred)
#Tahminlerin doğruluk oranını ölçen accuracy fonksiyonu

print("Model Doğruluğu (Accuracy):",accuracy)

#TAHMİNLER VE GERÇEKLER YAZDIRILMASI

for gercek,tahmin in zip(y_test,y_pred):

   print(f"Gerçek: {gercek}---Tahmin: {tahmin}")

"""   MODEL PERFORMANS ANALİZİ  """

#CONFUSİON MATRİX classificaiton_report

#Modelin nerelerde başarılı olup nerelerde başarısız olduğunu
#görebilmek adına rapor çıkarma için yapılan işlemlerdir

#CONFUSION MATRIX

from sklearn.metrics import confusion_matrix #kütüphane tanıtımı

cm=confusion_matrix(y_test,y_pred)#cunfusion matrik fonksiyonu ile hesaplama

print("Confusion Matrix:\n",cm)



#Satırlar ---->Gerçek Sınıf
#Sütunlar --->Tahmin edilen sınıf
#Diagonal(köşegen) --->Doğru tahminler

#DETAYLI BAŞARI RAPORU
#classification_report

from sklearn.metrics import classification_report

rapor=classification_report(y_test,y_pred,target_names=iris.target_names)
#precision,recall,f1-score gibi metrikleri fonksiyon yardımıyla hesaplama

print("Sınıflandırma Raporu:\n",rapor)

#YORUM

"""   Genel olarak tüm sınıflarda precision,recall,f1-score=1.00 olduğundan
      model %100 doğru tahmin etmiş

      Bu durum küçük ve dengeli veri setlerinde bazen mümkün olabilir


      1)PRECISION(KESİNLİK):
      Modelin bu sınıf dediğin verilerin gerçekten o sınıfa ait olma oranı

      Doğru Pozitif/(Doğru Pozitif+Yanlış Pozitif)

      2)RECALL(dUYARLILIK):
      Gerçekte bu sınıfa ait olanların ne kadarını model doğru tahmin etti?

      Doğru Pozitif/(Doğru Pozitif+Yanlış Negatif)

      3)F1-SCORE:
      Precision ve Recall'un Harmonik Ortalamasıdır.Dengeli Başarıyı Gösteri

      2.((Precision.Recall)/(Precision+Recall))





"""

import matplotlib.pyplot as plt
import seaborn as sns

#MATRİS ÇİZİMİ

from sklearn.metrics import confusion_matrix
#confusion matrixi hesaplama

cm=confusion_matrix(y_test,y_pred)


#Matris Çizimi

plt.figure(figsize=(6,4))#Grafik paramtreleri

sns.heatmap(cm,annot=True,cmap='Blues',fmt='d',
            xticklabels=iris.target_names,
            yticklabels=iris.target_names

            )


plt.xlabel('Tahmin Edilen Sınıf')
plt.ylabel('Gerçek Sınıf')
plt.title('Confusion Matrix Görselleştirmesi')
plt.show()

"""
Grafikte sadece köşegen üzerinde 13 (Setosa), 8 (Versicolor), 9 (Virginica) gibi
değerler göreceksin. Diğer tüm hücreler 0 olacak → bu da modelin hiç hata
yapmadığını gösterir.

"""